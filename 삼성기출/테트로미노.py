# 테트로미노
# https://www.acmicpc.net/problem/14500
# 테트로미노

n, m = map(int, input().split())
board = [list(map(int, input().split())) for _ in range(n)]

# 좌표
tetromino = [
    # 1자
    [(0, 0), (0, 1), (0, 2), (0, 3)],
    [(0, 0), (1, 0), (2, 0), (3, 0)],

    # ㅁ자
    [(0, 0), (0, 1), (1, 0), (1, 1)],

    # ㄴ자
    [(0, 0), (1, 0), (2, 0), (2, 1)],
    [(0, 0), (0, 1), (1, 1), (2, 1)],
    [(0, 0), (0, 1), (0, 2), (-1, 2)],
    [(0, 0), (0, 1), (0, 2), (1, 0)],
    [(0, 0), (0, 1), (-1, 1), (-2, 1)],
    [(0, 0), (1, 0), (2, 0), (0, 1)],
    [(0, 0), (1, 0), (1, 1), (1, 2)],
    [(0, 0), (0, 1), (0, 2), (1, 2)],

    # ㄹ자
    [(0, 0), (1, 0), (1, 1), (2, 1)],
    [(0, 0), (0, 1), (-1, 1), (-1, 2)],
    [(0, 0), (1, 0), (1, -1), (2, -1)],
    [(0, 0), (0, 1), (1, 1), (1, 2)],

    # ㅗ자
    [(0, 0), (0, 1), (0, 2), (1, 1)],
    [(0, 0), (1, 0), (2, 0), (1, 1)],
    [(0, 0), (0, 1), (0, 2), (-1, 1)],
    [(0, 0), (1, 0), (2, 0), (1, -1)]
]
answer = 0
for r in range(n):
    for c in range(m):
        for tetro in tetromino:
            mid_sum = 0
            for k in range(len(tetro)):
                nr = r + tetro[k][0]
                nc = c + tetro[k][1]
                if 0 <= nr < n and 0 <= nc < m:
                    mid_sum += board[nr][nc]
                else:
                    break

            answer = max(answer, mid_sum)
print(answer)
